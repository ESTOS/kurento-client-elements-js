/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var ChecktypeError = require('checktype').ChecktypeError;

var Endpoint = require('kurento-client').register.abstracts.Endpoint;

/**
 * Create a PlumberEndpoint
 *
 * @classdesc
 *  Endpoint that allows remote pipelines to negotiate the format of the media as well as to send data over SCTP. A {@link module:elements.PlumberEndpoint PlumberEndpoint} contains paired sink and source {@link module:core/abstracts.MediaPad MediaPad} for audio and video. This API is still under development so it might change without requiring a version change.
 *
 * @extends module:core/abstracts.Endpoint
 *
 * @constructor module:elements.PlumberEndpoint
 *
 * @param {external:String} id
 */
function PlumberEndpoint(id){
  PlumberEndpoint.super_.call(this, id);
};
inherits(PlumberEndpoint, Endpoint);

/**
 * @alias module:elements.PlumberEndpoint.constructorParams
 *
 * @property {external:String} localAddres
 *  IP Address where this endpoint will be waiting for incoming connections
 *
 * @property {external:Integer} localPort
 *  Port to listen to
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  The {@link module:core.MediaPipeline MediaPipeline} this PlumberEndpoint belongs to.
 *
 * @property {external:String} remoteAddres
 *  IP Address where this end point will connect to
 *
 * @property {external:Integer} remotePort
 *  Port to listen to
 */
PlumberEndpoint.constructorParams = {
  localAddres: {
    type: 'String',
    required: true
  },

  localPort: {
    type: 'int',
    required: true
  },

  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  remoteAddres: {
    type: 'String',
    required: true
  },

  remotePort: {
    type: 'int',
    required: true
  },
};

/**
 * @alias module:elements.PlumberEndpoint.events
 *
 * @extend module:core/abstracts.Endpoint.events
 */
PlumberEndpoint.events = Endpoint.events;

module.exports = PlumberEndpoint;

PlumberEndpoint.check = function(key, value)
{
  if(!(value instanceof PlumberEndpoint))
    throw ChecktypeError(key, PlumberEndpoint, value);
};
