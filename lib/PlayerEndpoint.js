/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var checkType = require('checktype');


/**
 * Media API for the Kurento Web SDK
 *
 * @module elements
 *
 * @copyright 2013-2014 Kurento (http://kurento.org/)
 * @license LGPL
 */

var UriEndpoint = require('core/abstracts').UriEndpoint;


/**
 * Retrieves content from seekable sources in reliable
 * mode (does not discard media information) and inject 
 * them into <a href="http://www.kurento.org/docs/current/glossary.html#term-kms">KMS</a>. It
 * contains one {@link MediaSource} for each media type detected.
 *
 * @class module:elements.PlayerEndpoint
 * @extends module:core/abstracts.UriEndpoint
 */

/**
 * Create a PlayerEndpoint
 *
 * @constructor
 *
 * @param {string} id
 */
function PlayerEndpoint(id){
  UriEndpoint.call(this, id);
};
inherits(PlayerEndpoint, UriEndpoint);


/**
 * Starts to send data to the endpoint {@link MediaSource}
 *
 * @param {module:elements.PlayerEndpoint~playCallback} [callback]
 *
 * @return {external:Promise}
 */
PlayerEndpoint.prototype.play = function(callback){
  return this.invoke('play', callback);
};
/**
 * @callback module:elements.PlayerEndpoint~playCallback
 * @param {Error} error
 */


/**
 * @type module:elements.PlayerEndpoint.constructorParams
 *
 * @property {MediaPipeline} mediaPipeline
 *  The {@link MediaPipeline} this PlayerEndpoint belongs to.
 *
 * @property {String} uri
 *  URI that will be played
 *
 * @property {boolean} [useEncodedMedia]
 *  use encoded instead of raw media. If the parameter is false then the
 *  element uses raw media. Changing this parameter can affect stability
 *  severely, as lost key frames lost will not be regenerated. Changing the media type does not
 *  affect to the result except in the performance (just in the case where
 *  original media and target media are the same) and in the problem with the
 *  key frames. We strongly recommended not to use this parameter because
 *  correct behaviour is not guarantied.
 */
PlayerEndpoint.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  uri: {
    type: 'String',
    required: true
  },

  useEncodedMedia: {
    type: 'boolean',
  },
};

/**
 * @type module:elements.PlayerEndpoint.events
 *
 * @extend module:core/abstracts.UriEndpoint.events
 */
PlayerEndpoint.events = ['EndOfStream'];
PlayerEndpoint.events.concat(UriEndpoint.events);


module.exports = PlayerEndpoint;


PlayerEndpoint.check = function(key, value)
{
  if(!(value instanceof PlayerEndpoint))
    throw SyntaxError(key+' param should be a PlayerEndpoint, not '+typeof value);
};
